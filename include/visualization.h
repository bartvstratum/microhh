/*
 * MicroHH
 * Copyright (c) 2011-2020 Chiel van Heerwaarden
 * Copyright (c) 2011-2020 Thijs Heus
 * Copyright (c) 2014-2020 Bart van Stratum
 *
 * This file is part of MicroHH
 *
 * MicroHH is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.

 * MicroHH is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.

 * You should have received a copy of the GNU General Public License
 * along with MicroHH.  If not, see <http://www.gnu.org/licenses/>.
 */

#ifndef VISUALIZATION_H
#define VISUALIZATION_H

#include <GL/glew.h>
#include <GL/freeglut.h>

class Master;
class Input;
template<typename> class Grid;
template<typename> class Fields;
template<typename> class Timeloop;


template<typename TF>
class Visualization
{
    public:
        Visualization(Master&, Grid<TF>&, Fields<TF>&, Input&); // Constructor of the decay class.
        ~Visualization();                                       // Destructor of the decay class.

        void create();
        void exec(Timeloop<TF>&);

    private:
        Master& master;
        Grid<TF>& grid;
        Fields<TF>& fields;

        void prepare_device();

        // Namelist settings
        bool sw_visualisation;

        // Size of buffer
        int width;
        int height;

        // Texture and pixel objects
        GLuint pbo = 0;     // OpenGL pixel buffer object
        GLuint tex = 0;     // OpenGL texture object
        struct cudaGraphicsResource *cuda_pbo_resource;

        // Colormap
        std::vector<int> cr = {
            255, 252, 250, 247, 244, 241, 239, 236, 233, 231, 228, 225, 223,
            220, 217, 214, 212, 209, 206, 204, 201, 198, 196, 193, 190, 187,
            185, 182, 179, 177, 174, 171, 169, 166, 163, 160, 158, 155, 153,
            151, 148, 146, 144, 141, 139, 137, 134, 132, 130, 127, 125, 123,
            120, 118, 116, 113, 111, 108, 106, 104, 101,  99,  97,  94,  92,
             90,  87,  85,  83,  80,  78,  76,  73,  72,  72,  72,  72,  72,
             72,  72,  72,  72,  72,  72,  72,  72,  72,  72,  72,  72,  72,
             73,  73,  73,  73,  73,  73,  73,  73,  73,  73,  73,  73,  73,
             73,  73,  73,  73,  73,  74,  78,  83,  88,  93,  97, 102, 107,
            112, 116, 121, 126, 131, 135, 140, 145, 150, 154, 159, 164, 169,
            173, 178, 183, 188, 192, 197, 202, 207, 211, 216, 221, 226, 230,
            235, 240, 245, 249, 250, 250, 250, 249, 249, 249, 249, 249, 249,
            249, 249, 248, 248, 248, 248, 248, 248, 248, 247, 247, 247, 247,
            247, 247, 247, 246, 246, 246, 246, 246, 246, 246, 245, 245, 245,
            245, 244, 244, 243, 242, 241, 240, 239, 238, 237, 236, 235, 234,
            233, 232, 231, 230, 229, 229, 228, 227, 226, 225, 224, 223, 222,
            221, 220, 219, 218, 217, 216, 215, 214, 214, 213, 212, 210, 209,
            207, 205, 203, 202, 200, 198, 196, 194, 193, 191, 189, 187, 185,
            184, 182, 180, 178, 176, 175, 173, 171, 169, 167, 166, 164, 162,
            160, 159, 157, 155, 153, 151, 150, 148, 146};

        std::vector<int> cg = {
            255, 254, 253, 252, 251, 250, 249, 248, 247, 246, 245, 244, 243,
            242, 241, 240, 239, 238, 237, 236, 235, 234, 233, 232, 231, 230,
            228, 227, 226, 225, 224, 223, 222, 221, 220, 219, 218, 217, 214,
            212, 210, 208, 206, 204, 202, 200, 198, 196, 193, 191, 189, 187,
            185, 183, 181, 179, 177, 175, 173, 170, 168, 166, 164, 162, 160,
            158, 156, 154, 152, 149, 147, 145, 143, 142, 144, 145, 146, 147,
            148, 149, 150, 151, 152, 153, 154, 155, 156, 158, 159, 160, 161,
            162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 173, 174, 175,
            176, 177, 178, 179, 180, 181, 183, 184, 185, 187, 188, 189, 191,
            192, 194, 195, 196, 198, 199, 200, 202, 203, 204, 206, 207, 209,
            210, 211, 213, 214, 215, 217, 218, 219, 221, 222, 224, 225, 226,
            228, 229, 230, 232, 229, 226, 222, 219, 215, 212, 208, 205, 201,
            198, 194, 191, 187, 184, 180, 177, 173, 170, 167, 163, 160, 156,
            153, 149, 146, 142, 139, 135, 132, 128, 125, 121, 118, 114, 111,
            107, 105, 103, 101,  99,  97,  94,  92,  90,  88,  86,  84,  82,
             80,  78,  76,  74,  72,  70,  68,  66,  63,  61,  59,  57,  55,
             53,  51,  49,  47,  45,  43,  41,  39,  37,  35,  32,  31,  31,
             30,  30,  30,  30,  29,  29,  29,  28,  28,  28,  28,  27,  27,
             27,  27,  26,  26,  26,  25,  25,  25,  25,  24,  24,  24,  23,
             23,  23,  23,  22,  22,  22,  22,  21,  21};

        std::vector<int> cb = {
            255, 255, 255, 254, 254, 254, 254, 253, 253, 253, 253, 253, 252,
            252, 252, 252, 251, 251, 251, 251, 251, 250, 250, 250, 250, 249,
            249, 249, 249, 249, 248, 248, 248, 248, 248, 247, 247, 246, 245,
            244, 242, 241, 240, 239, 237, 236, 235, 234, 232, 231, 230, 229,
            228, 226, 225, 224, 223, 221, 220, 219, 218, 216, 215, 214, 213,
            211, 210, 209, 208, 206, 205, 204, 203, 200, 197, 193, 190, 186,
            182, 179, 175, 171, 168, 164, 160, 157, 153, 150, 146, 142, 139,
            135, 131, 128, 124, 120, 117, 113, 109, 106, 102,  99,  95,  91,
             88,  84,  80,  77,  73,  70,  71,  71,  72,  72,  73,  74,  74,
             75,  75,  76,  77,  77,  78,  78,  79,  80,  80,  81,  81,  82,
             82,  83,  84,  84,  85,  85,  86,  87,  87,  88,  88,  89,  90,
             90,  91,  91,  92,  91,  90,  88,  87,  86,  84,  83,  82,  81,
             79,  78,  77,  75,  74,  73,  71,  70,  69,  68,  66,  65,  64,
             62,  61,  60,  59,  57,  56,  55,  53,  52,  51,  49,  48,  47,
             46,  45,  45,  45,  45,  44,  44,  44,  44,  44,  44,  44,  43,
             43,  43,  43,  43,  43,  43,  42,  42,  42,  42,  42,  42,  42,
             41,  41,  41,  41,  41,  41,  41,  41,  40,  40,  40,  40,  39,
             39,  39,  38,  38,  37,  37,  37,  36,  36,  35,  35,  35,  34,
             34,  33,  33,  32,  32,  32,  31,  31,  30,  30,  30,  29,  29,
             28,  28,  27,  27,  27,  26,  26,  25,  25};

        // Colormap on GPU
        int* cr_g;
        int* cg_g;
        int* cb_g;
};
#endif
